name: Full Build Pipeline

on:
  workflow_dispatch:
    inputs:
      lang_branch:
        description: 'ballerina-lang branch'
        required: true
        default: 'master'
      lang_version:
        description: 'ballerina-lang version [OPTIONAL] (This will use the version instead of a branch)'
        required: false
      patch_level:
        type: choice
        description: 'Patch Level (e.g.; 2201.4.x, 2201.3.x, master)'
        required: true
        options:
          - 'master'
          - '2201.9.x'
          - '2201.8.x'
          - '2201.7.x'
          - '2201.6.x'
          - '2201.5.x'
          - '2201.4.x'
          - '2201.3.x'
        default: 'master'
      downstream_branch:
        description: 'downstream repo branch [OPTIONAL]'
        required: false
      skip_tests:
        type: boolean
        description: 'Skip tests'
        deprecationMessage: 'true or false'
        required: true
      update_stdlib_dependencies:
        type: boolean
        description: 'Update stdlib dependencies'
        deprecationMessage: 'true or false'
        required: true
      build_released_versions:
        type: boolean
        description: 'Build released standard library versions'
        deprecationMessage: 'true or false'
        required: true

env:
  DISTRIBUTION_BUILD_LEVEL: 11

jobs:
  build-lang:
    name: Build ballerina-lang
    runs-on: ubuntu-latest
    timeout-minutes: 150
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install Python Packages
        run: |
          pip install requests
          pip install httplib2
          pip install colorama
          pip install configobj
          pip install requests
          pip install PyGithub
          pip install cryptography
      - name: Get Java Verison
        id: java-version
        run: |
          JAVA_VERSION=""
          patch_level=${{ github.event.inputs.patch_level }}
          if [[ "$patch_level" == "master" ]]; then
            JAVA_VERSION="17";
          else
            update_version="$(cut -d'.' -f2 <<<"$patch_level")" &&
            update_version=$((update_version)) &&
            if [[ $update_version -ge 8 ]]; then JAVA_VERSION="17"; else JAVA_VERSION="11"; fi;
          fi;

          echo "::set-output name=version::$JAVA_VERSION"
      - name: Set up JDK 17.0.7
        if: ${{ steps.java-version.outputs.version == '17' }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17.0.7'
      - name: Set up JDK 11
        if: ${{ steps.java-version.outputs.version == '11' }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Set command
        id: set-command
        shell: bash
        run: |
          FILE_PATH="./"
          commands=($FILE_PATH)
          if (${{github.event.inputs.lang_version != ''}})
          then
          commands+=("--lang-version" "${{ github.event.inputs.lang_version }}")
          else
          commands+=("--lang-branch" "${{ github.event.inputs.lang_branch }}")
          fi
          if (${{github.event.inputs.skip_tests}})
          then
          commands+=("--skip-tests")
          fi

          command_string=""
          for value in "${commands[@]}"
          do
          command_string+=" $value"
          done

          echo $command_string
          echo "::set-output name=command::$command_string"
      - name: Clean docker containers
        run: docker system prune -a -y

